package com.pvn.dao.jdbc.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Component;

import com.pvn.dao.CircleDao;
import com.pvn.model.Circle;

@Component
public class CircleDaoJDBCImpl implements CircleDao
{

	@Autowired
	private JdbcTemplate jdbcTemplate;

	@Override
	public Circle getCircle(int circleId)
	{
		String sql = "SELECT * FROM CIRCLE WHERE ID = ?";
		Circle circle = (Circle) jdbcTemplate.queryForObject(sql, new Object[] { circleId }, new CircleMapper());
		return circle;
	}
	
	@Override
	public List<Circle> getAllCircle()
	{
		String sql = "SELECT * FROM CIRCLE";
		return jdbcTemplate.query(sql, new Object[] {}, new CircleMapper());
	}

	@Override
	public void executeJDBCTemplateMethods()
	{
		String sql = "SELECT COUNT(*) FROM CIRCLE";
		long count = jdbcTemplate.queryForObject(sql, Long.class);
		
		System.out.println("rows in circle table: "+count);
		
		System.out.println("For id: 2, Name: " +getCircleNameForCircleId(2));
		
		System.out.println("select 3 rows");
		String selectAll = "SELECT * FROM CIRCLE ORDER BY ID DESC";
		jdbcTemplate.setMaxRows(3);
		List<Circle> circles = jdbcTemplate.query(selectAll, new Object[] {}, new CircleMapper());
		circles.forEach(circle -> 
			System.out.println(circle.getId()+": "+circle.getName())
		);
		
		String lastIdQuery = "SELECT ID FROM CIRCLE ORDER BY ID DESC LIMIT 1";
		long lastId = jdbcTemplate.queryForObject(lastIdQuery, Long.class);
		int id = (int) lastId + 1;
		insertIntoCircle(new Circle(id, "Circle" + id++));

		insertIntoCircleWithAutoGeneratedPK(new Circle(0, "Circle" + id));
		
		System.out.println("-------------");
		jdbcTemplate.setMaxRows(2);
		List<Circle> circs =  this.jdbcTemplate.query(selectAll, BeanPropertyRowMapper.newInstance(Circle.class));
		circs.forEach(circle -> 
		System.out.println(circle.getId()+": "+circle.getName())
	);
		
	}
	
	public String getCircleNameForCircleId(int circleId)
	{
		String sql="SELECT NAME FROM CIRCLE WHERE ID = ?";
		return (String) jdbcTemplate.queryForObject(sql, new Object[]{circleId}, String.class);
	}
	
	public int insertIntoCircle(Circle circle)
	{
		String sql="INSERT INTO CIRCLE (ID,NAME) VALUES(?,?)";
		return jdbcTemplate.update(sql, new Object[]{circle.getId() , circle.getName()});
	}
	
	public int insertIntoCircleWithAutoGeneratedPK(Circle circle)
	{
		String sql="INSERT INTO CIRCLE (NAME) VALUES(?)";
		return jdbcTemplate.update(sql, new Object[]{circle.getName()});
	}
	
	public static class CircleMapper implements RowMapper
	{
		@Override
		public Circle mapRow(ResultSet resultSet, int rowNum) throws SQLException 
		{
			Circle circle=new Circle();
			circle.setId(resultSet.getInt("id"));
			circle.setName(resultSet.getString("name"));
			return circle;
		}
		
	}

}
